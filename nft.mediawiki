<pre>
  NEP: 11/NFT-1
  Title: Non-Fungible Token Standard
  Author: Joe Stewart hal0x2328@splyse.tech, Shane Mann fetter@splyse.tech, Jonathan Winter jonathan@splyse.tech
  Type: Standard
  Status: Draft
  Created: 2018-04-18
</pre>

==Abstract==

The NEP-11 NFT-1 proposal defines a standard non-fungible token system for the NEO Smart Economy.

==Motivation==

NFTs are required to track, exchange and enforce ownership of digital assets. A non-fungible token (NFT) can be thought of like a property deed - each one is unique and carries some non-mutable information (e.g. the physical address of the property). Other information, such as the owner of the property, can be changed. Each token is indivisible in the same sense that a dog or a work of art cannot be divided.

==Specification==

In the method definitions below, we provide both the definitions of the functions, as they are defined in the contract, as well as the invoke parameters.

===Methods===

====allowance====
* Syntax: <code>allowance(token_id)</code>
* Return: <code>ByteArray</code>
* Remarks: <code>allowance(token_id)</code> returns the approved spend of <code>token_id</code>.

====approve====
* Syntax: <code>approve(receiver, token_id, revoke)</code>
* Return: <code>Boolean</code>
* Remarks: <code>approve()</code> approves token <code>token_id</code> to be transferred to <code>receiver</code> using the <code>transferFrom()</code> method. If <code>revoke</code> is set to <code>1</code>, the approval is revoked. A value of <code>True</code> is returned if the operation is approved. <code>False</code> is returned if the approval is denied because of incorrect permissions (owner is not in fact the owner, for example).

====balanceOf====
* Syntax: <code>balanceOf(owner)</code>
* Return: <code>Integer</code>
* Remarks: <code>balanceOf()</code> returns current total tokens owned by <code>owner</code>.

====mintToken====
* Syntax: <code>mintToken(owner, properties, URI, extra_arg)</code>
* Return: <code>Boolean</code>
* Remarks: <code>mintToken()</code> creates a new non-fungible token. This fails and returns <code>False</code> if the user is not the contract owner, returns <code>True</code> otherwise. The token will be sent to <code>owner</code> upon creation. <code>extra_arg</code> is an optional extra argument that can be passed in if <code>owner</code> is a smart contract.

====modifyURI====
* Syntax: <code>modifyURI(token_id, URI)</code>
* Return: <code>Boolean</code>
* Remarks: <code>modifyURI()</code> modifies a token's URI. This fails and returns <code>False</code> if the user is not the contract owner. The URI data of a token supplies a reference to get more information about a specific token or its data.

====name====
* Syntax: <code>name()</code>
* Return: <code>String</code>
* Remarks: <code>name()</code> returns the name of the token.

====ownerOf====
* Syntax: <code>ownerOf(token_id)</code>
* Return: <code>ByteArray</code>
* Remarks: <code>ownerOf()</code> returns the owner of token with id <code>token_id</code>.

====properties====
* Syntax: <code>properties(token_id)</code>
* Return: <code>ByteArray</code>
* Remarks: <code>properties()</code> returns the read-only data for token with id <code>token_id</code>. Read-only data represents immutable data contained in the token, i.e., a property address for a property or the artist's name for a work of art.

====supportedStandards====
* Syntax: <code>supportedStandards()</code>
* Return: <code>Array[String]</code>
* Remarks: <code>supportedStandards()</code> returns the standards supported by the token.

====symbol====
* Syntax: <code>symbol()</code>
* Return: <code>String</code>
* Remarks: <code>symbol()</code> returns the token symbol.

====tokenData====
* Syntax: <code>tokenData(token_id)</code>
* Return: <code>Dict</code>
* Remarks: <code>tokenData()</code> returns a dictionary where <code>token/{token_id}</code>, <code>properties/{token_id}</code>, and <code>uri/{token_id}</code> are mapped to a token's id, properties, and uri, respectively.

====tokensDataOfOwner====
* Syntax: <code>tokensDataOfOwner(owner, start_index)</code>
* Return: <code>Dict</code>
* Remarks: <code>tokensDataOfOwner()</code> returns a dictionary where <code>token/{token_id}</code>, <code>properties/{token_id}</code>, and <code>uri/{token_id}</code> are mapped to, at most five, token's corresponding values (id, properties, and uri) where each token is owned by <code>owner</code> beginning at index <code>start_index</code>.

====tokensOfOwner====
* Syntax: <code>tokensOfOwner(owner, start_index)</code>
* Return: <code>Dict</code>
* Remarks: <code>tokensOfOwner()</code> returns, at most, ten of the tokens owned by <code>owner</code> beginning at index <code>start_index</code>.

====totalSupply====
* Syntax: <code>totalSupply()</code>
* Return: <code>Integer</code>
* Remarks: <code>totalSupply()</code> returns the total token supply deployed in the system.

====transfer====
* Syntax: <code>transfer(to, token_id, extra_arg)</code>
* Return: <code>Boolean</code>
* Remarks: <code>transfer()</code> transfers token with id <code>token_id</code> to address <code>to</code>. <code>extra_arg</code> is an optional extra argument that can be passed in if <code>to</code> is a smart contract.

====transferFrom====
* Syntax: <code>transferFrom(from, to, token_id, extra_arg)</code>
* Return: <code>Boolean</code>
* Remarks: <code>transferFrom()</code> transfers a token with id <code>token_id</code> from address <code>from</code> to address <code>to</code> if the from address has been approved by the <code>approve()</code> method. If there is no approval this returns <code>False</code>, <code>True</code> otherwise.  <code>extra_arg</code> is an optional extra argument that can be passed in if <code>to</code> is a smart contract.

====uri====
* Syntax: <code>uri(token_id)</code>
* Return: <code>String</code>
* Remarks: <code>uri()</code> returns the URI of token with id <code>token_id</code>. The URI data of a token supplies a reference to get more information about a specific token or its data.

===Events===

====approve====
SHOULD trigger when a token is approved for transfer via <code>transferFrom</code>.

====mint====
MUST trigger when a token is minted.

====transfer====
MUST trigger when a token is transferred. 

==Rationale==

'''Sequential token identifiers''' are preferred as this makes the tokens less costly to enumerate as a starting point and offset would be all that are needed to list or locate tokens.

'''Standardized read-only token data access''' ensures contract and API authors all use one consistent interface and terminology. How the data is represented internally is left to the developer as data use should be specific to those needs. Therefore, marshalling is intentionally unspecified by this proposal.

==Implementation==

Splyse NFT Template: https://github.com/Splyse/neo-nft-template
